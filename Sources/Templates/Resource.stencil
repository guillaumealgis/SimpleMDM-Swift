//
//  Copyright 2018 Guillaume Algis.
//  Licensed under the MIT License. See the LICENSE.md file in the project root for more information.
//

import Foundation

internal extension Resource {
    func decodeAndValidateType<K: CodingKey>(forKey key: K, in container: KeyedDecodingContainer<K>, expecting expectedType: String) throws {
        let type = try container.decode(String.self, forKey: key)
        guard type == expectedType else {
            let description = "Expected type of resource to be \"\(expectedType)\" but got \"\(type)\""
            throw DecodingError.dataCorruptedError(forKey: key, in: container, debugDescription: description)
        }
    }
}

// swiftlint:disable file_length function_body_length
{% for type in types.structs where type.implements.Resource %}

// MARK: - {{ type.name }}
{% if type.implements.IdentifiableResource %}
// sourcery:inline:auto:{{ type.name }}.Identifiable
    public typealias ID = {{ type.annotations.identifierType|default:"Int" }}

    /// The unique identifier of this resource.
    public let id: ID
// sourcery:end
{% endif %}
extension {{ type.name }}: Resource {
    /// The remote API endpoint identifying this resource.
    public static var endpointName: String {
        "{{ type.localName|camelToSnakeCase }}{% ifnot type.implements.UniqueResource %}s{% endif %}"
    }
}

extension {{ type.name }}: Decodable {
    {# Hackish but works #}
    {% set hasRelationships %}{% for variable in type.instanceVariables where variable.type.implements.Relationship %}1{% endfor %}{% endset %}
    private enum CodingKeys: String, CodingKey {
        case type
        {% if type.implements.IdentifiableResource %}case id{% endif %}
        case attributes
        {% if hasRelationships %}case relationships{% endif %}
    }

    private enum AttributesKeys: String, CodingKey {
        {% for variable in type.instanceVariables where not variable.type.implements.RelatedToResource %}
        case {{ variable.name }}
        {% endfor %}
    }
    {% if hasRelationships %}

    private enum RelationshipKeys: String, CodingKey {
        {% for variable in type.instanceVariables where variable.type.implements.Relationship %}
        case {{ variable.name }}
        {% endfor %}
    }
    {% endif %}

    /// Creates a new instance of the resource by decoding from the given decoder.
    ///
    /// This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or
    /// otherwise invalid.
    ///
    /// - Parameters:
    ///   - decoder: The decoder to read data from.
    public init(from decoder: Decoder) throws {
        let payload = try decoder.container(keyedBy: CodingKeys.self)

        {% if type.implements.IdentifiableResource %}
        id = try payload.decode(ID.self, forKey: .id)

        {% endif %}
        let attributes = try payload.nestedContainer(keyedBy: AttributesKeys.self, forKey: .attributes)
        {% for variable in type.instanceVariables where not variable.type.implements.RelatedToResource and not variable.type.implements.NestedResourceAttribute %}
        {% if variable.typeName.isOptional %}
        {{ variable.name }} = try attributes.decodeIfPresent({{ variable.typeName.unwrappedTypeName }}.self, forKey: .{{ variable.name }})
        {% else %}
        {{ variable.name }} = try attributes.decode({{ variable.typeName }}.self, forKey: .{{ variable.name }})
        {% endif %}
        {% endfor %}
        {% if hasRelationships %}

        let relationships = try payload.nestedContainer(keyedBy: RelationshipKeys.self, forKey: .relationships)
        {% for variable in type.instanceVariables where variable.type.implements.Relationship %}
        {{ variable.name }} = try relationships.decode({{ variable.typeName.unwrappedTypeName }}.self, forKey: .{{ variable.name }})
        {% endfor %}
        {% endif %}
        {% for variable in type.instanceVariables where variable.type.implements.NestedResourceAttribute %}
        {{ variable.name }} = {{ variable.typeName }}(parentId: id)
        {% endfor %}

        try decodeAndValidateType(forKey: .type, in: payload, expecting: "{{ type.localName|camelToSnakeCase }}")
    }
}
{% endfor %}
